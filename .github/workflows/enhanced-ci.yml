name: Enhanced VSEmbed CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  test-golden-files:
    name: Golden File Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run golden file tests
        run: |
          npm run test:golden
          git diff --exit-code tests/golden/
        env:
          UPDATE_GOLDEN: false

      - name: Check for golden file changes
        run: |
          if [ -n "$(git status --porcelain tests/golden/)" ]; then
            echo "Golden files have changed. Run 'npm run test:golden --update' to update them."
            exit 1
          fi

      - name: Upload golden file diff
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: golden-file-diff
          path: tests/golden/
          retention-days: 7

  test-ai-components:
    name: AI Component Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test AI Service
        run: npm run test -- --testPathPattern=ai-service --coverage

      - name: Test Debug Adapter
        run: npm run test -- --testPathPattern=debug-adapter --coverage

      - name: Test Code Generator
        run: npm run test -- --testPathPattern=code-generator --coverage

      - name: Test Code Reviewer
        run: npm run test -- --testPathPattern=code-reviewer --coverage

      - name: Upload AI test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/ai-components.xml
          flags: ai-components

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start test services
        run: |
          # Start mock AI service for integration tests
          npm run start:mock-ai &
          sleep 5

      - name: Run integration tests
        run: npm run test:integration
        env:
          AI_SERVICE_URL: http://localhost:3001

      - name: Test dependency injection
        run: npm run test -- --testPathPattern=container --coverage

      - name: Test event system
        run: npm run test -- --testPathPattern=event-bus --coverage

      - name: Stop test services
        run: |
          pkill -f "mock-ai" || true

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: npm run test:performance

      - name: Test model cache performance
        run: npm run test -- --testPathPattern=model-cache --coverage

      - name: Test debounced generator performance
        run: npm run test -- --testPathPattern=debounced-generator --coverage

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json
          retention-days: 30

  security-enhanced:
    name: Enhanced Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run dependency audit
        run: npm audit --audit-level=moderate

      - name: Check for security headers
        run: |
          grep -r "Content-Security-Policy" src/ || {
            echo "Warning: No CSP headers found"
            exit 1
          }

      - name: Scan for hardcoded secrets
        run: |
          # Simple secret scanning
          if grep -r "api[_-]key\|password\|secret" src/ --exclude-dir=node_modules; then
            echo "Potential secrets found in source code"
            exit 1
          fi

      - name: Test AI security measures
        run: npm run test -- --testPathPattern=security --coverage

  build-enhanced:
    name: Enhanced Build Process
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    needs: [test-golden-files, test-ai-components, test-integration, security-enhanced]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/electron
            ~/.cache/electron-builder
            node_modules/.cache
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint:check

      - name: Run type checking
        run: npm run type-check

      - name: Build with enhanced features
        run: |
          npm run build:core
          npm run build:ai-components
          npm run build:extensions
        env:
          NODE_ENV: production
          ENABLE_AI_FEATURES: true

      - name: Test built artifacts
        run: |
          # Test that all AI components are properly built
          if [ ! -f "dist/ai/ai-service.js" ]; then
            echo "AI Service not built"
            exit 1
          fi
          
          if [ ! -f "dist/debug/ai-debug-adapter.js" ]; then
            echo "AI Debug Adapter not built"
            exit 1
          fi
          
          if [ ! -f "dist/ai/code-reviewer.js" ]; then
            echo "Code Reviewer not built"
            exit 1
          fi

      - name: Package with AI features
        run: npm run package:full
        env:
          NODE_ENV: production
          INCLUDE_AI_MODELS: true

      - name: Upload enhanced build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vsembed-enhanced-${{ matrix.os }}-${{ github.sha }}
          path: |
            out/
            dist/
            ai-models/
          retention-days: 30

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build-enhanced

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: vsembed-enhanced-ubuntu-latest-${{ github.sha }}
          path: ./dist

      - name: Setup virtual display
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Run E2E tests
        run: |
          xvfb-run --auto-servernum --server-args="-screen 0 1280x720x24" npm run test:e2e
        env:
          DISPLAY: ':99'

      - name: Test AI features E2E
        run: |
          xvfb-run --auto-servernum --server-args="-screen 0 1280x720x24" npm run test:e2e:ai
        env:
          DISPLAY: ':99'
          AI_TEST_MODE: true

      - name: Upload E2E screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: tests/e2e/screenshots/
          retention-days: 7

  release-enhanced:
    name: Enhanced Release Process
    runs-on: ubuntu-latest
    needs: [build-enhanced, test-e2e, test-performance]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all build artifacts
        uses: actions/download-artifact@v3

      - name: Build release with AI models
        run: |
          npm run build:release
          npm run package:ai-models
        env:
          NODE_ENV: production
          INCLUDE_LOCAL_MODELS: true

      - name: Create comprehensive release
        run: |
          npm run make:all-platforms
          npm run create:installer
        env:
          NODE_ENV: production

      - name: Generate release checksums
        run: |
          cd out/make
          find . -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" \) -exec sha256sum {} \; > checksums.txt
          
          # Verify checksums
          sha256sum -c checksums.txt

      - name: Create release notes
        run: |
          echo "# VSEmbed AI DevTool Release" > release-notes.md
          echo "" >> release-notes.md
          echo "## New Features" >> release-notes.md
          echo "- Enhanced AI-powered debugging" >> release-notes.md
          echo "- Intelligent code generation" >> release-notes.md
          echo "- Real-time code review" >> release-notes.md
          echo "- Performance monitoring" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Performance Metrics" >> release-notes.md
          cat performance-results.json >> release-notes.md

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vsembed-release-${{ github.sha }}
          path: |
            out/make/
            checksums.txt
            release-notes.md
            ai-models/
          retention-days: 90

  docker-enhanced:
    name: Enhanced Docker Build
    runs-on: ubuntu-latest
    needs: build-enhanced

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development image
        run: |
          docker build -t vsembed-dev:${{ github.sha }} \
            --target development \
            --build-arg NODE_VERSION=${{ env.NODE_VERSION }} \
            .

      - name: Build production image with AI
        run: |
          docker build -t vsembed-prod:${{ github.sha }} \
            --target production \
            --build-arg NODE_VERSION=${{ env.NODE_VERSION }} \
            --build-arg INCLUDE_AI_MODELS=true \
            .

      - name: Test Docker images
        run: |
          # Test development image
          docker run --rm vsembed-dev:${{ github.sha }} npm test
          
          # Test production image
          docker run --rm vsembed-prod:${{ github.sha }} node --version

      - name: Security scan Docker images
        run: |
          # Simple security check for Docker images
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image vsembed-prod:${{ github.sha }}

      - name: Save Docker images
        run: |
          docker save vsembed-dev:${{ github.sha }} | gzip > vsembed-dev-${{ github.sha }}.tar.gz
          docker save vsembed-prod:${{ github.sha }} | gzip > vsembed-prod-${{ github.sha }}.tar.gz

      - name: Upload Docker images
        uses: actions/upload-artifact@v3
        with:
          name: vsembed-docker-${{ github.sha }}
          path: |
            vsembed-dev-${{ github.sha }}.tar.gz
            vsembed-prod-${{ github.sha }}.tar.gz
          retention-days: 30

  metrics:
    name: Collect Metrics
    runs-on: ubuntu-latest
    needs: [test-golden-files, test-ai-components, test-integration, test-performance, build-enhanced]
    if: always()

    steps:
      - name: Collect workflow metrics
        run: |
          echo "# Workflow Metrics" > metrics.md
          echo "- Golden File Tests: ${{ needs.test-golden-files.result }}" >> metrics.md
          echo "- AI Component Tests: ${{ needs.test-ai-components.result }}" >> metrics.md
          echo "- Integration Tests: ${{ needs.test-integration.result }}" >> metrics.md
          echo "- Performance Tests: ${{ needs.test-performance.result }}" >> metrics.md
          echo "- Enhanced Build: ${{ needs.build-enhanced.result }}" >> metrics.md
          echo "- Workflow completed at: $(date)" >> metrics.md

      - name: Upload metrics
        uses: actions/upload-artifact@v3
        with:
          name: workflow-metrics
          path: metrics.md
          retention-days: 90
