name: Build and Test VSEmbed

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Updated from ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3  # Updated from v2
        with:
          path: |
            ~/.npm
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Electron binaries
        uses: actions/cache@v3
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run linting
        run: npm run lint:check

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test:coverage

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Package application
        run: npm run package
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vsembed-${{ matrix.os }}-${{ github.sha }}
          path: |
            out/
            dist/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security scan
        run: |
          npm run security:audit
          npm run security:check

      - name: Check for vulnerabilities
        run: npm audit --audit-level=moderate

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for release
        run: npm run build-release
        env:
          NODE_ENV: production

      - name: Create release packages
        run: npm run make
        env:
          NODE_ENV: production

      - name: Generate checksums
        run: |
          cd out/make
          find . -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" \) -exec sha256sum {} \; > checksums.txt

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vsembed-release-${{ github.sha }}
          path: |
            out/make/
            checksums.txt
          retention-days: 90

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build extension runtime image
        run: |
          docker build -t vsembed-extension-runtime:${{ github.sha }} .
          docker tag vsembed-extension-runtime:${{ github.sha }} vsembed-extension-runtime:latest

      - name: Test Docker image
        run: |
          docker run --rm vsembed-extension-runtime:${{ github.sha }} node --version

      - name: Save Docker image
        run: |
          docker save vsembed-extension-runtime:${{ github.sha }} | gzip > vsembed-runtime-${{ github.sha }}.tar.gz

      - name: Upload Docker image
        uses: actions/upload-artifact@v3
        with:
          name: vsembed-docker-${{ github.sha }}
          path: vsembed-runtime-${{ github.sha }}.tar.gz
          retention-days: 30
